var __awaiter=this&&this.__awaiter||function(e,t,n,a){return new(n||(n=Promise))((function(i,c){function s(e){try{o(a.next(e))}catch(e){c(e)}}function r(e){try{o(a.throw(e))}catch(e){c(e)}}function o(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,r)}o((a=a.apply(e,t||[])).next())}))};class Bank{constructor(e){this.clients=e||[],this.bank=document.querySelector(".bank"),this.clientId=4,this.accountId=4,this.render()}render(){this.showForm(),document.querySelector("ul")&&document.querySelector("ul").remove(),document.querySelector(".accountsList")&&document.querySelector(".accountsList").remove();let e=this.bank.appendChild(document.createElement("ul"));e.addEventListener("click",this.handleClick),this.showClientsList(e)}handleSubmitForm(e,t){t.preventDefault();let n=new FormData(e);this.addClient(n),this.addAccount(n),this.render()}handleClick(e){if(e.preventDefault(),"BUTTON"!==e.target.nodeName)return;let t=Number(e.target.closest("li").dataset.id);"delete"===e.target.dataset.action&&(document.querySelector(".accountsList")&&document.querySelector(".accountsList").remove(),this.clients.forEach(((e,n,a)=>{e.id===t&&a.splice(n,1)})),e.target.closest("li").remove()),"edit"===e.target.dataset.action&&this.clients.forEach(((e,n,a)=>{e.id===t&&(newBank.showForm(e),a.splice(n,1))})),"accounts"===e.target.dataset.action&&(document.querySelector(".accountsList")&&document.querySelector(".accountsList").remove(),newBank.showClientAccounts(t))}showForm(e){let t=`<form class="form">\n    <fieldset>\n      <legend>${e?"Edit client":"Add client"}</legend>\n      <label>\n        Name\n        <input type="text" name="name" value="${e?e.name:""}"/>\n      </label>\n      <label>\n        Surname\n        <input type="text" name="surname" \n        value="${e?e.surname:""}"/>\n      </label>\n      <label>\n       Is active\n        <select name="isActive">\n          <option value="${e?e.isActive:"true"}">\n            ${e?e.isActive:"true"}\n          </option>\n          <option value="true">true</option>\n          <option value="false">false</option>\n        </select>\n      </label>\n        <label>\n          Type account\n          <select name="type">\n            <option value="debit">debit</option>\n            <option value="credit">credit</option>\n          </select>\n        </label>\n        <label>\n          Currency\n          <select name="currency">\n            <option value="UAH">UAH</option>\n            <option value="USD">USD</option>\n            <option value="EUR">EUR</option>\n            <option value="RUR">RUR</option>\n          </select>\n        </label>\n        <label>\n          Balance\n          <input type="number" name="balance" />\n        </label>\n        <label>\n          Credit limit\n          <input type="number" name="creditLimit" />\n        </label>\n      <button type="submit">${e?"Edit":"Add"}</button>\n    </fieldset>\n  </form>`;document.querySelector(".form")&&document.querySelector(".form").remove(),this.bank.insertAdjacentHTML("afterbegin",t);let n=document.querySelector(".form");n.addEventListener("submit",this.handleSubmitForm.bind(this,n))}showClientsList(e){this.clients.forEach((({id:t,name:n,surname:a,registrationDate:i,isActive:c})=>{const s=`<li class="client-item" data-id="${t}">\n          <span>Name: <span>${n}</span> |</span>\n          <span>Surname: <span>${a}</span> |</span>\n          <span>Registration date: <span>${i}</span> |</span>\n          <span>isActive: <span>${c}</span> </span>\n          <button type="button" data-action="accounts">accounts</button>\n          <button type="button" data-action="edit">edit</button>\n          <button type="button" data-action="delete">delete</button>\n        </li>`;e.insertAdjacentHTML("beforeend",s)}))}showClientAccounts(e){const t=this.bank.appendChild(document.createElement("ul"));t.classList.add("accountsList");let n="";this.clients.forEach((a=>{e===a.id&&a.accounts.forEach((e=>{n=` <li class="account-item data-id="${e.id}">\n          <p>Account: <span>${e.type}</span></p>\n          <p>Creation date: <span>${e.creationDate}</span></p>\n          <p>Expiration date: <span>${e.expirationDate}</span></p>\n          <p>Currency: <span>${e.currency}</span></p>\n          <p>Is active account: <span>${e.isActive}</span></p>\n          <p>Balance: <span>${e.balance}</span></p>\n          <p>Credit limit: <span>${e.creditLimit}</span></p>\n          <p>Personal funds: <span>${e.personalFunds}</span></p>\n          <p>Used credit funds: <span>${e.usedCreditFunds}</span></p>\n          </li>`,t.insertAdjacentHTML("beforeend",n)}))}))}addClient(e){const t={id:this.clientId++,name:String(e.get("name")),surname:String(e.get("surname")),registrationDate:(new Date).toDateString(),isActive:Boolean(e.get("isActive")),accounts:[]};return this.clients.push(t),this.render(),t}findClient(e){return this.clients.find((t=>t.id===e))}addAccount(e){const t=this.findClient(this.accountId),n=new Date,a=new Date(n.setFullYear(n.getFullYear()+3)),i={id:this.accountId++,type:e.get("type"),currency:String(e.get("currency")),isActive:!0,creationDate:(new Date).toDateString(),expirationDate:a.toDateString(),balance:0,creditLimit:0,usedCreditFunds:0,personalFunds:0};return"debit"===i.type&&(i.balance=Number(e.get("balance")),i.personalFunds=i.balance),"credit"===i.type&&(i.creditLimit=Number(e.get("creditLimit")),i.balance=Number(e.get("balance"))+i.creditLimit,i.personalFunds=i.balance-i.creditLimit),t.accounts.push(i),i}"converts小urrency"(e,t,n,a){let i,c,s=0;for(let a of e)a.ccy===t&&(i=a),a.ccy===n&&(c=a);return t===n?a:("UAH"===t&&(s=a/Number(c.buy)),"UAH"===n&&(s=a*Number(i.buy)),e.forEach((e=>{c&&t===e.ccy&&(s=a*Number(e.buy)/Number(c.buy))})),Math.round(100*s)/100)}getTotalAmountFunds(e){return __awaiter(this,void 0,void 0,(function*(){const t=yield this.getExchangeRates((e=>e));let n=0;return this.clients.forEach((a=>{a.accounts.forEach((a=>{a.currency===e?n+=a.balance:n+=this.converts小urrency(t,a.currency,e,a.balance)}))})),Math.round(100*n)/100}))}getTotalAmountDebts(e){return __awaiter(this,void 0,void 0,(function*(){const t=yield this.getExchangeRates((e=>e));let n=0;return this.clients.forEach((a=>{a.accounts.forEach((a=>{a.usedCreditFunds&&(a.currency===e?n+=a.usedCreditFunds:n+=this.converts小urrency(t,a.currency,e,a.usedCreditFunds))}))})),Math.round(100*n)/100}))}getDebtors(e,t){return __awaiter(this,void 0,void 0,(function*(){const n=yield this.getExchangeRates((e=>e));let a={debtors:0,sumDebt:0};for(let i of this.clients)for(let c of i.accounts)i.isActive===e&&c.usedCreditFunds&&(a.debtors++,c.currency===t?a.sumDebt+=c.usedCreditFunds:a.sumDebt+=this.converts小urrency(n,c.currency,t,c.usedCreditFunds));return a}))}getExchangeRates(e){return __awaiter(this,void 0,void 0,(function*(){try{return yield fetch("https://api.privatbank.ua/p24api/pubinfo?exchange&json&coursid=11").then((e=>e.json()))}catch(t){e(t)}}))}}const newBank=new Bank;